============================= test session starts ==============================
platform darwin -- Python 3.11.1, pytest-7.1.3, pluggy-1.0.0 -- /Users/alex/Dew/django_sprint4/venv/bin/python3.11
django: settings: blogicum.settings (from ini)
rootdir: /Users/alex/Dew/django_sprint4, configfile: pytest.ini, testpaths: tests/
plugins: Faker-12.0.1, django-4.5.2
collecting ... collected 21 items

tests/test_content.py::TestContent::test_unpublished FAILED              [  4%]
tests/test_content.py::TestContent::test_unpublished_category FAILED     [  9%]
tests/test_content.py::TestContent::test_future_posts FAILED             [ 14%]
tests/test_content.py::TestContent::test_pagination FAILED               [ 19%]
tests/test_content.py::TestContent::test_image_visible FAILED            [ 23%]
tests/test_err_pages.py::test_custom_err_handlers FAILED                 [ 28%]
tests/test_users.py::test_custom_err_handlers PASSED                     [ 33%]
tests/test_users.py::test_profile FAILED                                 [ 38%]
tests/test_comment.py::test_comment_created_at ERROR                     [ 42%]
tests/test_comment.py::test_comment ERROR                                [ 47%]
tests/test_post.py::test_post_created_at PASSED                          [ 52%]
tests/test_post.py::test_post FAILED                                     [ 57%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[post-ForeignKey-params0] <- tests/conftest.py PASSED [ 61%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[author-ForeignKey-params1] <- tests/conftest.py PASSED [ 66%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[text-TextField-params2] <- tests/conftest.py PASSED [ 71%]
tests/test_comment.py::TestCommentModelAttrs::test_model_attrs[created_at-DateTimeField-params3] <- tests/conftest.py PASSED [ 76%]
tests/test_emails.py::test_gitignore PASSED                              [ 80%]
tests/test_emails.py::test_email_backend_settings PASSED                 [ 85%]
tests/test_err_pages.py::test_csrf_failure_view PASSED                   [ 90%]
tests/test_post.py::TestPostModelAttrs::test_model_attrs[image-ImageField-params0] <- tests/conftest.py PASSED [ 95%]
tests/test_static_pages.py::test_static_pages_as_cbv FAILED              [100%]

==================================== ERRORS ====================================
__________________ ERROR at setup of test_comment_created_at ___________________

self = <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>
sql = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]
ignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x1067ec890>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

venv/lib/python3.11/site-packages/django/db/backends/utils.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x107c60710>
query = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.IntegrityError: NOT NULL constraint failed: blog_post.author_id

venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py:423: IntegrityError

The above exception was the direct cause of the following exception:

self = <TypeMixer <class 'blog.models.Comment'>>, field_name = 'post'
field = <mixer.mix_types.Field object at 0x107d00f90>, fake = True
unique = False

    def gen_value(self, field_name, field, fake=None, unique=False):
        """ Generate values from basic types.
    
        :return : (name, value) for later use
    
        """
        fake = self.__fake if fake is None else fake
        if not field:
            field = t.Field(getattr(self.__scheme, field_name, None), field_name)
    
        fab = self.get_fabric(field, field_name, fake=fake)
    
        try:
>           value = fab()

venv/lib/python3.11/site-packages/mixer/main.py:241: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_scheme = <django.db.models.fields.related.ForeignKey: post>
_typemixer = <TypeMixer <class 'blog.models.Comment'>>, params = {}
scheme = <class 'blog.models.Post'>

    def get_relation(_scheme=None, _typemixer=None, **params):
        """ Function description. """
        scheme = _scheme.related_model
    
        if scheme is ContentType:
            choices = [m for m in apps.get_models() if m is not ContentType]
            return ContentType.objects.get_for_model(faker.random_element(choices))
    
>       return TypeMixer(scheme, mixer=_typemixer._TypeMixer__mixer,
                         factory=_typemixer._TypeMixer__factory,
                         fake=_typemixer._TypeMixer__fake,).blend(**params)

venv/lib/python3.11/site-packages/mixer/backend/django.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <TypeMixer <class 'blog.models.Post'>>
values = [('created_at', datetime.datetime(2018, 3, 2, 16, 43, 38, tzinfo=<mixer.backend.django.UTCZone object at 0x106a30750>)...entFile: Raw content>), ('location', <Location: After Who Year His W>), ('category', <Category: Yes Write Nation Sou>)]
defaults = OrderedDict([('is_published', <mixer.mix_types.Field object at 0x107d01090>), ('created_at', <mixer.mix_types.Field ob...ocation', <mixer.mix_types.Field object at 0x107d01510>), ('category', <mixer.mix_types.Field object at 0x107d01590>)])
name = 'category', value = <Category: Yes Write Nation Sou>
candidates = [('created_at', datetime.datetime(2018, 3, 2, 16, 43, 38, tzinfo=<mixer.backend.django.UTCZone object at 0x106a30750>)...entFile: Raw content>), ('location', <Location: After Who Year His W>), ('category', <Category: Yes Write Nation Sou>)]
postprocess_values = []

    def blend(self, **values):
        """ Generate object.
    
        :param **values: Predefined fields
        :return value: a generated value
    
        """
        defaults = deepcopy(self.__fields)
    
        # Prepare relations
        for key, params in values.items():
            if '__' in key:
                name, value = key.split('__', 1)
                if name not in defaults:
                    defaults[name] = t.Field(None, name)
                defaults[name].params.update({value: params})
                continue
            defaults[key] = params
    
        values = dict(
            value.gen_value(self, name, value)
            if isinstance(value, t.ServiceValue)
            else self.get_value(name, value)
            for name, value in defaults.items()
        )
    
        # Parse MIX and SKIP values
        candidates = list(
            (name, value & values if isinstance(value, t.Mix) else value)
            for name, value in values.items()
            if value is not SKIP_VALUE
        )
    
        values = list()
        postprocess_values = list()
        for name, value in candidates:
            if isinstance(value, t._Deffered):
                postprocess_values.append((name, value))
            else:
                values.append((name, value))
    
        target = self.populate_target(values)
    
        # Run registered middlewares
        for middleware in self.middlewares:
            target = middleware(target)
    
>       target = self.postprocess(target, postprocess_values)

venv/lib/python3.11/site-packages/mixer/main.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <TypeMixer <class 'blog.models.Post'>>
target = <Post: Sign Open Lawyer Own>, postprocess_values = []

    def postprocess(self, target, postprocess_values):
        """ Fill postprocess_values. """
        for name, deffered in postprocess_values:
            if not isinstance(deffered.scheme, GenericForeignKey):
                continue
    
            name, value = self._get_value(name, deffered.value)
            setattr(target, name, value)
    
        if self.__mixer:
>           target = self.__mixer.postprocess(target)

venv/lib/python3.11/site-packages/mixer/backend/django.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Mixer [fake]>, target = <Post: Sign Open Lawyer Own>

    def postprocess(self, target):
        """ Save objects in db.
    
        :return value: A generated value
    
        """
        if self.params.get('commit'):
>           target.save()

venv/lib/python3.11/site-packages/mixer/backend/django.py:429: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Post: Sign Open Lawyer Own>, force_insert = False, force_update = False
using = 'default', update_fields = None

    def save(self, force_insert=False, force_update=False, using=None,
             update_fields=None):
        """
        Save the current instance. Override this in a subclass if you want to
        control the saving process.
    
        The 'force_insert' and 'force_update' parameters can be used to insist
        that the "save" must be an SQL insert or update (or equivalent for
        non-SQL backends), respectively. Normally, they should not be set.
        """
        self._prepare_related_fields_for_save(operation_name='save')
    
        using = using or router.db_for_write(self.__class__, instance=self)
        if force_insert and (force_update or update_fields):
            raise ValueError("Cannot force both insert and updating in model saving.")
    
        deferred_fields = self.get_deferred_fields()
        if update_fields is not None:
            # If update_fields is empty, skip the save. We do also check for
            # no-op saves later on for inheritance cases. This bailout is
            # still needed for skipping signal sending.
            if not update_fields:
                return
    
            update_fields = frozenset(update_fields)
            field_names = set()
    
            for field in self._meta.concrete_fields:
                if not field.primary_key:
                    field_names.add(field.name)
    
                    if field.name != field.attname:
                        field_names.add(field.attname)
    
            non_model_fields = update_fields.difference(field_names)
    
            if non_model_fields:
                raise ValueError(
                    'The following fields do not exist in this model, are m2m '
                    'fields, or are non-concrete fields: %s'
                    % ', '.join(non_model_fields)
                )
    
        # If saving to the same database, and this model is deferred, then
        # automatically do an "update_fields" save on the loaded fields.
        elif not force_insert and deferred_fields and using == self._state.db:
            field_names = set()
            for field in self._meta.concrete_fields:
                if not field.primary_key and not hasattr(field, 'through'):
                    field_names.add(field.attname)
            loaded_fields = field_names.difference(deferred_fields)
            if loaded_fields:
                update_fields = frozenset(loaded_fields)
    
>       self.save_base(using=using, force_insert=force_insert,
                       force_update=force_update, update_fields=update_fields)

venv/lib/python3.11/site-packages/django/db/models/base.py:739: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Post: Sign Open Lawyer Own>, raw = False, force_insert = False
force_update = False, using = 'default', update_fields = None

    def save_base(self, raw=False, force_insert=False,
                  force_update=False, using=None, update_fields=None):
        """
        Handle the parts of saving which should be done only once per save,
        yet need to be done in raw saves, too. This includes some sanity
        checks and signal sending.
    
        The 'raw' argument is telling save_base not to save any parent
        models and not to do any changes to the values before save. This
        is used by fixture loading.
        """
        using = using or router.db_for_write(self.__class__, instance=self)
        assert not (force_insert and (force_update or update_fields))
        assert update_fields is None or update_fields
        cls = origin = self.__class__
        # Skip proxies, but keep the origin as the proxy model.
        if cls._meta.proxy:
            cls = cls._meta.concrete_model
        meta = cls._meta
        if not meta.auto_created:
            pre_save.send(
                sender=origin, instance=self, raw=raw, using=using,
                update_fields=update_fields,
            )
        # A transaction isn't needed if one query is issued.
        if meta.parents:
            context_manager = transaction.atomic(using=using, savepoint=False)
        else:
            context_manager = transaction.mark_for_rollback_on_error(using=using)
        with context_manager:
            parent_inserted = False
            if not raw:
                parent_inserted = self._save_parents(cls, using, update_fields)
>           updated = self._save_table(
                raw, cls, force_insert or parent_inserted,
                force_update, using, update_fields,
            )

venv/lib/python3.11/site-packages/django/db/models/base.py:776: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Post: Sign Open Lawyer Own>, raw = False
cls = <class 'blog.models.Post'>, force_insert = False, force_update = False
using = 'default', update_fields = None

    def _save_table(self, raw=False, cls=None, force_insert=False,
                    force_update=False, using=None, update_fields=None):
        """
        Do the heavy-lifting involved in saving. Update or insert the data
        for a single table.
        """
        meta = cls._meta
        non_pks = [f for f in meta.local_concrete_fields if not f.primary_key]
    
        if update_fields:
            non_pks = [f for f in non_pks
                       if f.name in update_fields or f.attname in update_fields]
    
        pk_val = self._get_pk_val(meta)
        if pk_val is None:
            pk_val = meta.pk.get_pk_value_on_save(self)
            setattr(self, meta.pk.attname, pk_val)
        pk_set = pk_val is not None
        if not pk_set and (force_update or update_fields):
            raise ValueError("Cannot force an update in save() with no primary key.")
        updated = False
        # Skip an UPDATE when adding an instance and primary key has a default.
        if (
            not raw and
            not force_insert and
            self._state.adding and
            meta.pk.default and
            meta.pk.default is not NOT_PROVIDED
        ):
            force_insert = True
        # If possible, try an UPDATE. If that doesn't update anything, do an INSERT.
        if pk_set and not force_insert:
            base_qs = cls._base_manager.using(using)
            values = [(f, None, (getattr(self, f.attname) if raw else f.pre_save(self, False)))
                      for f in non_pks]
            forced_update = update_fields or force_update
            updated = self._do_update(base_qs, using, pk_val, values, update_fields,
                                      forced_update)
            if force_update and not updated:
                raise DatabaseError("Forced update did not affect any rows.")
            if update_fields and not updated:
                raise DatabaseError("Save with update_fields did not affect any rows.")
        if not updated:
            if meta.order_with_respect_to:
                # If this is a model with an order_with_respect_to
                # autopopulate the _order field
                field = meta.order_with_respect_to
                filter_args = field.get_filter_kwargs_for_object(self)
                self._order = cls._base_manager.using(using).filter(**filter_args).aggregate(
                    _order__max=Coalesce(
                        ExpressionWrapper(Max('_order') + Value(1), output_field=IntegerField()),
                        Value(0),
                    ),
                )['_order__max']
            fields = meta.local_concrete_fields
            if not pk_set:
                fields = [f for f in fields if f is not meta.auto_field]
    
            returning_fields = meta.db_returning_fields
>           results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)

venv/lib/python3.11/site-packages/django/db/models/base.py:881: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Post: Sign Open Lawyer Own>
manager = <django.db.models.manager.Manager object at 0x107290b50>
using = 'default'
fields = [<django.db.models.fields.BooleanField: is_published>, <django.db.models.fields.DateTimeField: created_at>, <django.db...ield: text>, <django.db.models.fields.DateTimeField: pub_date>, <django.db.models.fields.files.ImageField: image>, ...]
returning_fields = [<django.db.models.fields.BigAutoField: id>], raw = False

    def _do_insert(self, manager, using, fields, returning_fields, raw):
        """
        Do an INSERT. If returning_fields is defined then this method should
        return the newly created data for the model.
        """
>       return manager._insert(
            [self], fields=fields, returning_fields=returning_fields,
            using=using, raw=raw,
        )

venv/lib/python3.11/site-packages/django/db/models/base.py:919: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.models.manager.Manager object at 0x107290b50>
args = ([<Post: Sign Open Lawyer Own>],)
kwargs = {'fields': [<django.db.models.fields.BooleanField: is_published>, <django.db.models.fields.DateTimeField: created_at>,...ield: image>, ...], 'raw': False, 'returning_fields': [<django.db.models.fields.BigAutoField: id>], 'using': 'default'}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv/lib/python3.11/site-packages/django/db/models/manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <QuerySet []>, objs = [<Post: Sign Open Lawyer Own>]
fields = [<django.db.models.fields.BooleanField: is_published>, <django.db.models.fields.DateTimeField: created_at>, <django.db...ield: text>, <django.db.models.fields.DateTimeField: pub_date>, <django.db.models.fields.files.ImageField: image>, ...]
returning_fields = [<django.db.models.fields.BigAutoField: id>], raw = False
using = 'default', ignore_conflicts = False

    def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
        """
        Insert a new record for the given model. This provides an interface to
        the InsertQuery class and is how Model.save() is implemented.
        """
        self._for_write = True
        if using is None:
            using = self.db
        query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)
        query.insert_values(fields, objs, raw=raw)
>       return query.get_compiler(using=using).execute_sql(returning_fields)

venv/lib/python3.11/site-packages/django/db/models/query.py:1270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.models.sql.compiler.SQLInsertCompiler object at 0x107d02e50>
returning_fields = [<django.db.models.fields.BigAutoField: id>]

    def execute_sql(self, returning_fields=None):
        assert not (
            returning_fields and len(self.query.objs) != 1 and
            not self.connection.features.can_return_rows_from_bulk_insert
        )
        self.returning_fields = returning_fields
        with self.connection.cursor() as cursor:
            for sql, params in self.as_sql():
>               cursor.execute(sql, params)

venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py:1416: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>
sql = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]

    def execute(self, sql, params=None):
        with self.debug_sql(sql, params, use_last_executed_query=True):
>           return super().execute(sql, params)

venv/lib/python3.11/site-packages/django/db/backends/utils.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>
sql = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]

    def execute(self, sql, params=None):
>       return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)

venv/lib/python3.11/site-packages/django/db/backends/utils.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>
sql = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]
many = False
executor = <bound method CursorWrapper._execute of <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>>

    def _execute_with_wrappers(self, sql, params, many, executor):
        context = {'connection': self.db, 'cursor': self}
        for wrapper in reversed(self.db.execute_wrappers):
            executor = functools.partial(wrapper, executor)
>       return executor(sql, params, many, context)

venv/lib/python3.11/site-packages/django/db/backends/utils.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>
sql = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]
ignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x1067ec890>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
>       with self.db.wrap_database_errors:

venv/lib/python3.11/site-packages/django/db/backends/utils.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.utils.DatabaseErrorWrapper object at 0x1071c6790>
exc_type = <class 'sqlite3.IntegrityError'>
exc_value = IntegrityError('NOT NULL constraint failed: blog_post.author_id')
traceback = <traceback object at 0x107d03600>

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is None:
            return
        for dj_exc_type in (
                DataError,
                OperationalError,
                IntegrityError,
                InternalError,
                ProgrammingError,
                NotSupportedError,
                DatabaseError,
                InterfaceError,
                Error,
        ):
            db_exc_type = getattr(self.wrapper.Database, dj_exc_type.__name__)
            if issubclass(exc_type, db_exc_type):
                dj_exc_value = dj_exc_type(*exc_value.args)
                # Only set the 'errors_occurred' flag for errors that may make
                # the connection unusable.
                if dj_exc_type not in (DataError, IntegrityError):
                    self.wrapper.errors_occurred = True
>               raise dj_exc_value.with_traceback(traceback) from exc_value

venv/lib/python3.11/site-packages/django/db/utils.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>
sql = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]
ignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x1067ec890>, 'cursor': <django.db.backends.utils.CursorDebugWrapper object at 0x107d02d90>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

venv/lib/python3.11/site-packages/django/db/backends/utils.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x107c60710>
query = 'INSERT INTO "blog_post" ("is_published", "created_at", "title", "text", "pub_date", "image", "author_id", "location_id", "category_id") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
params = [True, '2023-06-01 17:33:32.722194', 'Sign Open Lawyer Owner Born Really', 'Fish never discussion tree. Least hospital...current.\nAccording education quite machine.', '2023-06-01 17:33:32.722040', 'birthdays_images/image_sII8keO.gif', ...]

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.IntegrityError: NOT NULL constraint failed: blog_post.author_id

venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py:423: IntegrityError

During handling of the above exception, another exception occurred:

mixer = <Mixer [fake]>, user = <User: christopher99>
CommentModel = <class 'blog.models.Comment'>
CommentModelAdapter = <class 'adapters.comment.CommentModelAdapter.<locals>._CommentModelAdapter'>

    @pytest.fixture
    def comment(mixer: Mixer, user: object, CommentModel: type,
                CommentModelAdapter: CommentModelAdapterT) -> CommentModelAdapterT:
>       comment = mixer.blend(f'blog.{CommentModel.__name__}')

tests/fixtures/comments.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.11/site-packages/mixer/main.py:568: in blend
    return type_mixer.blend(**values)
venv/lib/python3.11/site-packages/mixer/main.py:112: in blend
    values = dict(
venv/lib/python3.11/site-packages/mixer/main.py:113: in <genexpr>
    value.gen_value(self, name, value)
venv/lib/python3.11/site-packages/mixer/mix_types.py:229: in gen_value
    return type_mixer.gen_field(field)
venv/lib/python3.11/site-packages/mixer/backend/django.py:274: in gen_field
    return super(TypeMixer, self).gen_field(field)
venv/lib/python3.11/site-packages/mixer/main.py:193: in gen_field
    return self.gen_value(field.name, field, unique=unique)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <TypeMixer <class 'blog.models.Comment'>>, field_name = 'post'
field = <mixer.mix_types.Field object at 0x107d00f90>, fake = True
unique = False

    def gen_value(self, field_name, field, fake=None, unique=False):
        """ Generate values from basic types.
    
        :return : (name, value) for later use
    
        """
        fake = self.__fake if fake is None else fake
        if not field:
            field = t.Field(getattr(self.__scheme, field_name, None), field_name)
    
        fab = self.get_fabric(field, field_name, fake=fake)
    
        try:
            value = fab()
        except ValueError:
            value = None
        except Exception as exc:
            LOGGER.exception(exc)
>           raise ValueError("Generation for %s (%s) has been stopped. Exception: %s" % (
                field_name, self.__scheme.__name__, exc))
E           ValueError: Mixer (blog.Comment): Generation for post (Comment) has been stopped. Exception: NOT NULL constraint failed: blog_post.author_id

venv/lib/python3.11/site-packages/mixer/main.py:246: ValueError
---------------------------- Captured stderr setup -----------------------------
NOT NULL constraint failed: blog_post.author_id
Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: blog_post.author_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 241, in gen_value
    value = fab()
            ^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 72, in get_relation
    return TypeMixer(scheme, mixer=_typemixer._TypeMixer__mixer,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 140, in blend
    target = self.postprocess(target, postprocess_values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 179, in postprocess
    target = self.__mixer.postprocess(target)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 429, in postprocess
    target.save()
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 739, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 776, in save_base
    updated = self._save_table(
              ^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 881, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 919, in _do_insert
    return manager._insert(
           ^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/query.py", line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py", line 1416, in execute_sql
    cursor.execute(sql, params)
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 98, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 79, in _execute
    with self.db.wrap_database_errors:
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
django.db.utils.IntegrityError: NOT NULL constraint failed: blog_post.author_id
Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: blog_post.author_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 241, in gen_value
    value = fab()
            ^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 72, in get_relation
    return TypeMixer(scheme, mixer=_typemixer._TypeMixer__mixer,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 140, in blend
    target = self.postprocess(target, postprocess_values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 179, in postprocess
    target = self.__mixer.postprocess(target)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 429, in postprocess
    target.save()
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 739, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 776, in save_base
    updated = self._save_table(
              ^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 881, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 919, in _do_insert
    return manager._insert(
           ^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/query.py", line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py", line 1416, in execute_sql
    cursor.execute(sql, params)
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 98, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 79, in _execute
    with self.db.wrap_database_errors:
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
django.db.utils.IntegrityError: NOT NULL constraint failed: blog_post.author_id

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 568, in blend
    return type_mixer.blend(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 112, in blend
    values = dict(
             ^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 113, in <genexpr>
    value.gen_value(self, name, value)
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/mix_types.py", line 229, in gen_value
    return type_mixer.gen_field(field)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 274, in gen_field
    return super(TypeMixer, self).gen_field(field)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 193, in gen_field
    return self.gen_value(field.name, field, unique=unique)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 246, in gen_value
    raise ValueError("Generation for %s (%s) has been stopped. Exception: %s" % (
ValueError: Mixer (blog.Comment): Generation for post (Comment) has been stopped. Exception: NOT NULL constraint failed: blog_post.author_id

------------------------------ Captured log setup ------------------------------
ERROR    mixer:main.py:245 NOT NULL constraint failed: blog_post.author_id
Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: blog_post.author_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 241, in gen_value
    value = fab()
            ^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 72, in get_relation
    return TypeMixer(scheme, mixer=_typemixer._TypeMixer__mixer,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 140, in blend
    target = self.postprocess(target, postprocess_values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 179, in postprocess
    target = self.__mixer.postprocess(target)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 429, in postprocess
    target.save()
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 739, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 776, in save_base
    updated = self._save_table(
              ^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 881, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 919, in _do_insert
    return manager._insert(
           ^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/query.py", line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py", line 1416, in execute_sql
    cursor.execute(sql, params)
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 98, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 79, in _execute
    with self.db.wrap_database_errors:
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
django.db.utils.IntegrityError: NOT NULL constraint failed: blog_post.author_id
ERROR    mixer:main.py:574 Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlite3.IntegrityError: NOT NULL constraint failed: blog_post.author_id

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 241, in gen_value
    value = fab()
            ^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 72, in get_relation
    return TypeMixer(scheme, mixer=_typemixer._TypeMixer__mixer,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 140, in blend
    target = self.postprocess(target, postprocess_values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 179, in postprocess
    target = self.__mixer.postprocess(target)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 429, in postprocess
    target.save()
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 739, in save
    self.save_base(using=using, force_insert=force_insert,
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 776, in save_base
    updated = self._save_table(
              ^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 881, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/base.py", line 919, in _do_insert
    return manager._insert(
           ^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/query.py", line 1270, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/models/sql/compiler.py", line 1416, in execute_sql
    cursor.execute(sql, params)
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 98, in execute
    return super().execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 79, in _execute
    with self.db.wrap_database_errors:
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/django/db/backends/sqlite3/base.py", line 423, in execute
    return Database.Cursor.execute(self, query, params)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
django.db.utils.IntegrityError: NOT NULL constraint failed: blog_post.author_id

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 568, in blend
    return type_mixer.blend(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 112, in blend
    values = dict(
             ^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 113, in <genexpr>
    value.gen_value(self, name, value)
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/mix_types.py", line 229, in gen_value
    return type_mixer.gen_field(field)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/backend/django.py", line 274, in gen_field
    return super(TypeMixer, self).gen_field(field)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 193, in gen_field
    return self.gen_value(field.name, field, unique=unique)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/alex/Dew/django_sprint4/venv/lib/python3.11/site-packages/mixer/main.py", line 246, in gen_value
    raise ValueError("Generation for %s (%s) has been stopped. Exception: %s" % (
ValueError: Mixer (blog.Comment): Generation for post (Comment) has been stopped. Exception: NOT NULL constraint failed: blog_post.author_id
________________________ ERROR at setup of test_comment ________________________

user_client = <django.test.client.Client object at 0x1074adc10>
post_with_published_location = <Post: Security Game Partne>

    @pytest.fixture
    def post_comment_context_form_item(
            user_client: Client, post_with_published_location
    ) -> Tuple[str, BaseForm]:
        response = get_a_post_get_response_safely(
            user_client, post_with_published_location.id)
>       result: KeyVal = _testget_context_item_by_class(
            response.context, BaseForm, (
                'Убедитесь, что в словарь контекста шаблона '
                'страницы публикации передаётся ровно одна форма '
                'для создания комментария.'
            )
        )

tests/fixtures/posts.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

context = [[{'True': True, 'False': False, 'None': None}, {'csrf_token': <SimpleLazyObject: 'fSOxHuXqivFNItYuGlwBf5V1PQpd1r8wbIl...0, 'first': False, 'last': True}, 'panel': <debug_toolbar.panels.profiling.ProfilingPanel object at 0x107b78890>}, {}]]
cls = <class 'django.forms.forms.BaseForm'>
err_msg = 'Убедитесь, что в словарь контекста шаблона страницы публикации передаётся ровно одна форма для создания комментария.'
inside_iter = False

    def _testget_context_item_by_class(
            context, cls: type, err_msg: str,
            inside_iter: bool = False
    ) -> KeyVal:
        """If `err_msg` is not empty, empty return value will
        produce an AssertionError with the `err_msg` error message"""
    
        def is_a_match(val: Any):
            if inside_iter:
                try:
                    return isinstance(iter(val).__next__(), cls)
                except Exception:
                    return False
            else:
                return isinstance(val, cls)
    
        matched_keyval: KeyVal = KeyVal(key=None, val=None)
        matched_keyvals: List[KeyVal] = []
        for key, val in dict(context).items():
            if is_a_match(val):
                matched_keyval = KeyVal(key, val)
                matched_keyvals.append(matched_keyval)
        if err_msg:
>           assert len(matched_keyvals) == 1, err_msg
E           AssertionError: Убедитесь, что в словарь контекста шаблона страницы публикации передаётся ровно одна форма для создания комментария.
E           assert 0 == 1
E            +  where 0 = len([])

tests/conftest.py:278: AssertionError
=================================== FAILURES ===================================
_________________________ TestContent.test_unpublished _________________________

self = <test_content.ProfilePostContentTester object at 0x10722f5d0>
client = <django.test.client.Client object at 0x1074ba2d0>
url = '/profile/yolandacarroll/', assert_status_in = (200,)
assert_cbk = 'raise_assert_page_loads_cbk'

    def _testget(
            self,
            client,
            url: Optional[str] = None,
            assert_status_in: Tuple[int] = (200,),
            assert_cbk: Union[
                Callable[[], None], str] = 'raise_assert_page_loads_cbk'
    ) -> HttpResponse:
    
        url = url or self.page_url.url
        try:
            response = client.get(url)
            if response.status_code not in assert_status_in:
>               raise Exception
E               Exception

tests/test_content.py:136: Exception

During handling of the above exception, another exception occurred:

self = <test_content.TestContent object at 0x106c34850>
unpublished_posts_with_published_locations = [<Post: Floor Fund Race Glas>, <Post: Admit Future Reach I>, <Post: Role History Apply T>]

    def test_unpublished(
            self, unpublished_posts_with_published_locations):
>       profile_response = self.profile_tester.user_client_testget()

tests/test_content.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_content.py:111: in user_client_testget
    return self._testget(self.user_client, url, assert_status_in,
tests/test_content.py:141: in _testget
    getattr(self, assert_cbk)()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_content.ProfilePostContentTester object at 0x10722f5d0>

    def raise_assert_page_loads_cbk(self):
>       raise AssertionError(
            f'Убедитесь, что {self.which_page} загружается без ошибок.')
E       AssertionError: Убедитесь, что страница пользователя загружается без ошибок.

tests/test_content.py:102: AssertionError
---------------------------- Captured stdout setup -----------------------------
Operations to perform:
  Synchronize unmigrated apps: core, debug_toolbar, django_bootstrap5, messages, pages, staticfiles
  Apply all migrations: admin, auth, blog, contenttypes, sessions
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying blog.0001_initial... OK
  Applying blog.0002_auto_20230501_0844... OK
  Applying blog.0003_auto_20230514_1358... OK
  Applying blog.0004_comment... OK
  Applying blog.0005_rename_name_location_title... OK
  Applying blog.0006_alter_post_pub_date... OK
  Applying blog.0007_alter_comment_options... OK
  Applying blog.0008_profile... OK
  Applying blog.0009_auto_20230525_1040... OK
  Applying blog.0010_alter_comment_options... OK
  Applying blog.0011_alter_comment_options... OK
  Applying blog.0012_auto_20230526_1157... OK
  Applying blog.0013_rename_user_comment_author... OK
  Applying sessions.0001_initial... OK
---------------------------- Captured stderr setup -----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
----------------------------- Captured stderr call -----------------------------
Not Found: /profile/yolandacarroll/
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Not Found: /profile/yolandacarroll/
____________________ TestContent.test_unpublished_category _____________________

self = <test_content.ProfilePostContentTester object at 0x107207790>
client = <django.test.client.Client object at 0x10722d150>
url = '/profile/weisskarl/', assert_status_in = (200,)
assert_cbk = 'raise_assert_page_loads_cbk'

    def _testget(
            self,
            client,
            url: Optional[str] = None,
            assert_status_in: Tuple[int] = (200,),
            assert_cbk: Union[
                Callable[[], None], str] = 'raise_assert_page_loads_cbk'
    ) -> HttpResponse:
    
        url = url or self.page_url.url
        try:
            response = client.get(url)
            if response.status_code not in assert_status_in:
>               raise Exception
E               Exception

tests/test_content.py:136: Exception

During handling of the above exception, another exception occurred:

self = <test_content.TestContent object at 0x106c36550>
user_client = <django.test.client.Client object at 0x10722d150>
posts_with_unpublished_category = [<Post: I Require Movement S>, <Post: Baby Expect Knowledg>, <Post: Station Should Succe>]

    def test_unpublished_category(
            self, user_client, posts_with_unpublished_category
    ):
>       profile_response = self.profile_tester.user_client_testget()

tests/test_content.py:369: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_content.py:111: in user_client_testget
    return self._testget(self.user_client, url, assert_status_in,
tests/test_content.py:141: in _testget
    getattr(self, assert_cbk)()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_content.ProfilePostContentTester object at 0x107207790>

    def raise_assert_page_loads_cbk(self):
>       raise AssertionError(
            f'Убедитесь, что {self.which_page} загружается без ошибок.')
E       AssertionError: Убедитесь, что страница пользователя загружается без ошибок.

tests/test_content.py:102: AssertionError
----------------------------- Captured stderr call -----------------------------
Not Found: /profile/weisskarl/
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Not Found: /profile/weisskarl/
________________________ TestContent.test_future_posts _________________________

self = <test_content.ProfilePostContentTester object at 0x10722fe50>
client = <django.test.client.Client object at 0x10781bb90>
url = '/profile/llogan/', assert_status_in = (200,)
assert_cbk = 'raise_assert_page_loads_cbk'

    def _testget(
            self,
            client,
            url: Optional[str] = None,
            assert_status_in: Tuple[int] = (200,),
            assert_cbk: Union[
                Callable[[], None], str] = 'raise_assert_page_loads_cbk'
    ) -> HttpResponse:
    
        url = url or self.page_url.url
        try:
            response = client.get(url)
            if response.status_code not in assert_status_in:
>               raise Exception
E               Exception

tests/test_content.py:136: Exception

During handling of the above exception, another exception occurred:

self = <test_content.TestContent object at 0x106c35690>
user_client = <django.test.client.Client object at 0x10781bb90>
future_posts = [<Post: Agent Success Manage>, <Post: Pull Tax Sense Cours>, <Post: Floor Enter Energy S>]

    def test_future_posts(self, user_client, future_posts):
>       profile_response = self.profile_tester.user_client_testget()

tests/test_content.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_content.py:111: in user_client_testget
    return self._testget(self.user_client, url, assert_status_in,
tests/test_content.py:141: in _testget
    getattr(self, assert_cbk)()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_content.ProfilePostContentTester object at 0x10722fe50>

    def raise_assert_page_loads_cbk(self):
>       raise AssertionError(
            f'Убедитесь, что {self.which_page} загружается без ошибок.')
E       AssertionError: Убедитесь, что страница пользователя загружается без ошибок.

tests/test_content.py:102: AssertionError
----------------------------- Captured stderr call -----------------------------
Not Found: /profile/llogan/
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Not Found: /profile/llogan/
_________________________ TestContent.test_pagination __________________________

self = <test_content.ProfilePostContentTester object at 0x107564050>
client = <django.test.client.Client object at 0x1078e9290>
url = '/profile/sheltonkristen/', assert_status_in = (200,)
assert_cbk = 'raise_assert_page_loads_cbk'

    def _testget(
            self,
            client,
            url: Optional[str] = None,
            assert_status_in: Tuple[int] = (200,),
            assert_cbk: Union[
                Callable[[], None], str] = 'raise_assert_page_loads_cbk'
    ) -> HttpResponse:
    
        url = url or self.page_url.url
        try:
            response = client.get(url)
            if response.status_code not in assert_status_in:
>               raise Exception
E               Exception

tests/test_content.py:136: Exception

During handling of the above exception, another exception occurred:

self = <test_content.TestContent object at 0x106c36d10>
user_client = <django.test.client.Client object at 0x1078e9290>
many_posts_with_published_locations = [<Post: Tv Yourself Wait Bil>, <Post: Strategy Enter Matte>, <Post: Tv Economic Statemen>, <Post: Former Senior Leave >, <Post: Specific Behavior To>, <Post: Particular Really Ev>, ...]

    def test_pagination(self, user_client,
                        many_posts_with_published_locations):
        posts = many_posts_with_published_locations
    
        assert len(posts) > self.profile_tester.n_per_page
        assert len(posts) > self.main_tester.n_per_page
        assert len(posts) > self.category_tester.n_per_page
    
        for tester, response_get_func, which_context in (
                (self.profile_tester, self.profile_tester.user_client_testget,
                 'контекст страницы профиля автора'),
                (self.profile_tester,
                 self.profile_tester.another_client_testget,
                 'контекст страницы профиля автора'),
                (self.main_tester, self.main_tester.user_client_testget,
                 'контекст главной страницы'),
                (
                        self.category_tester,
                        self.category_tester.user_client_testget,
                        'контекст страницы категории')):
>           response = response_get_func()

tests/test_content.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_content.py:111: in user_client_testget
    return self._testget(self.user_client, url, assert_status_in,
tests/test_content.py:141: in _testget
    getattr(self, assert_cbk)()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_content.ProfilePostContentTester object at 0x107564050>

    def raise_assert_page_loads_cbk(self):
>       raise AssertionError(
            f'Убедитесь, что {self.which_page} загружается без ошибок.')
E       AssertionError: Убедитесь, что страница пользователя загружается без ошибок.

tests/test_content.py:102: AssertionError
----------------------------- Captured stderr call -----------------------------
Not Found: /profile/sheltonkristen/
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Not Found: /profile/sheltonkristen/
________________________ TestContent.test_image_visible ________________________

self = <test_content.ProfilePostContentTester object at 0x107711750>
client = <django.test.client.Client object at 0x1078ee090>
url = '/profile/hutchinsonadrian/', assert_status_in = (200,)
assert_cbk = 'raise_assert_page_loads_cbk'

    def _testget(
            self,
            client,
            url: Optional[str] = None,
            assert_status_in: Tuple[int] = (200,),
            assert_cbk: Union[
                Callable[[], None], str] = 'raise_assert_page_loads_cbk'
    ) -> HttpResponse:
    
        url = url or self.page_url.url
        try:
            response = client.get(url)
            if response.status_code not in assert_status_in:
>               raise Exception
E               Exception

tests/test_content.py:136: Exception

During handling of the above exception, another exception occurred:

self = <test_content.TestContent object at 0x106c32d10>
user_client = <django.test.client.Client object at 0x1078ee090>
post_with_published_location = <Post: Worker Democrat Stat>

    def test_image_visible(self, user_client, post_with_published_location):
        post = post_with_published_location
        post_adapter = PostModelAdapter(post)
    
        img_n_with_post_img = {}
        for tester in (
                self.profile_tester, self.main_tester, self.category_tester):
            img_soup_with_post_img = BeautifulSoup(
>               tester.user_client_testget().content.decode('utf-8'),
                features='html.parser',
                parse_only=SoupStrainer('img'))

tests/test_content.py:460: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_content.py:111: in user_client_testget
    return self._testget(self.user_client, url, assert_status_in,
tests/test_content.py:141: in _testget
    getattr(self, assert_cbk)()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_content.ProfilePostContentTester object at 0x107711750>

    def raise_assert_page_loads_cbk(self):
>       raise AssertionError(
            f'Убедитесь, что {self.which_page} загружается без ошибок.')
E       AssertionError: Убедитесь, что страница пользователя загружается без ошибок.

tests/test_content.py:102: AssertionError
----------------------------- Captured stderr call -----------------------------
Not Found: /profile/hutchinsonadrian/
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Not Found: /profile/hutchinsonadrian/
___________________________ test_custom_err_handlers ___________________________

client = <django.test.client.Client object at 0x10796fd90>
user_client = <django.test.client.Client object at 0x107a687d0>

    @pytest.mark.django_db
    def test_custom_err_handlers(client, user_client):
        err_pages_vs_file_names = {
            404: '404.html',
            403: '403csrf.html',
            500: '500.html'
        }
        for status, fname in err_pages_vs_file_names.items():
            fpath = settings.TEMPLATES_DIR / 'pages' / fname
            assert os.path.isfile(fpath.resolve()), (
                f'Убедитесь, что файл шаблона `{fpath}` существует.'
            )
    
        try:
>           from blogicum.urls import handler500
E           ImportError: cannot import name 'handler500' from 'blogicum.urls' (/Users/alex/Dew/django_sprint4/blogicum/blogicum/urls.py)

tests/test_err_pages.py:57: ImportError

During handling of the above exception, another exception occurred:

client = <django.test.client.Client object at 0x10796fd90>
user_client = <django.test.client.Client object at 0x107a687d0>

    @pytest.mark.django_db
    def test_custom_err_handlers(client, user_client):
        err_pages_vs_file_names = {
            404: '404.html',
            403: '403csrf.html',
            500: '500.html'
        }
        for status, fname in err_pages_vs_file_names.items():
            fpath = settings.TEMPLATES_DIR / 'pages' / fname
            assert os.path.isfile(fpath.resolve()), (
                f'Убедитесь, что файл шаблона `{fpath}` существует.'
            )
    
        try:
            from blogicum.urls import handler500
        except Exception:
>           raise AssertionError(
                'Убедитесь, что задали обработчик ошибки со статусом 500 в '
                'головном файле с маршрутами, и что в этом файле нет ошибок.'
            )
E           AssertionError: Убедитесь, что задали обработчик ошибки со статусом 500 в головном файле с маршрутами, и что в этом файле нет ошибок.

tests/test_err_pages.py:59: AssertionError
_________________________________ test_profile _________________________________

user = <User: cynthiafrederick>, another_user = <User: jeanettestevens>
user_client = <django.test.client.Client object at 0x107aee3d0>
another_user_client = <django.test.client.Client object at 0x1078d5710>
unlogged_client = <django.test.client.Client object at 0x10797c5d0>

    @pytest.mark.django_db
    def test_profile(
            user, another_user, user_client, another_user_client, unlogged_client):
        user_url = f'/profile/{user.username}/'
        printed_url = '/profile/<username>/'
    
        user_response: HttpResponse = user_client.get(user_url)
        user_content = user_response.content.decode('utf-8')
    
        anothers_same_page_response: HttpResponse = another_user_client.get(
            user_url)
        anothers_same_page_content = anothers_same_page_response.content.decode(
            'utf-8')
    
        unlogged_same_page_response: HttpResponse = unlogged_client.get(
            user_url)
        unlogged_same_page_content = unlogged_same_page_response.content.decode(
            'utf-8')
    
        for profile_user, profile_user_content in (
                (user, user_content), (user, unlogged_same_page_content),
                (user, anothers_same_page_content)):
>           _test_user_info_displayed(
                profile_user, profile_user_content, printed_url)

tests/test_users.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

profile_user = <User: cynthiafrederick>
profile_user_content = '<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta http-equiv="content-type" content="text/html; charset=utf-8">\n  <...  \n    \n\n\n\n  \n  <div id="djDebugWindow" class="djdt-panelContent djdt-hidden"></div>\n</div>\n</body>\n</html>\n'
printed_url = '/profile/<username>/'

    def _test_user_info_displayed(
            profile_user: Model, profile_user_content: str, printed_url: str
    ) -> None:
        if profile_user.first_name not in profile_user_content:
>           raise AssertionError(
                f'Убедитесь, что на странице `{printed_url}` '
                'отображается имя пользователя.')
E           AssertionError: Убедитесь, что на странице `/profile/<username>/` отображается имя пользователя.

tests/test_users.py:142: AssertionError
----------------------------- Captured stderr call -----------------------------
Not Found: /profile/cynthiafrederick/
Not Found: /profile/cynthiafrederick/
Not Found: /profile/cynthiafrederick/
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:224 Not Found: /profile/cynthiafrederick/
WARNING  django.request:log.py:224 Not Found: /profile/cynthiafrederick/
WARNING  django.request:log.py:224 Not Found: /profile/cynthiafrederick/
__________________________________ test_post ___________________________________

self = <form.post.create_form_tester.CreatePostFormTester object at 0x1086b9650>
form = <PostForm bound=True, valid=False, fields=(is_published;title;text;pub_date;image;author;location;category)>
qs = <QuerySet [<Post: Than Program Player >]>
submitter = <form.base_form_tester.AnonymousSubmitTester object at 0x108873e90>
assert_created = False

    def test_create_item(
            self, form: BaseForm, qs: QuerySet,
            submitter: SubmitTester,
            assert_created: bool = True
    ) -> Tuple[HttpResponse, Model]:
    
        try:
>           response, created = self.try_create_item(
                form, qs, submitter, assert_created)

tests/form/base_form_tester.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <form.post.create_form_tester.CreatePostFormTester object at 0x1086b9650>
form = <PostForm bound=True, valid=False, fields=(is_published;title;text;pub_date;image;author;location;category)>
qs = <QuerySet [<Post: Than Program Player >]>
submitter = <form.base_form_tester.AnonymousSubmitTester object at 0x108873e90>
assert_created = False

    def try_create_item(
            self, form: BaseForm, qs: QuerySet,
            submitter: SubmitTester,
            assert_created: bool = True
    ) -> Tuple[HttpResponse, Model]:
    
        if not form.is_valid():
>           raise FormValidationException(form.errors)
E           form.base_form_tester.FormValidationException: <ul class="errorlist"><li>author<ul class="errorlist"><li>Обязательное поле.</li></ul></li></ul>

tests/form/base_form_tester.py:135: FormValidationException

During handling of the above exception, another exception occurred:

published_category = <Category: Entire Bad Phone His>
published_location = <Location: Sure College Tax Ind>
user_client = <django.test.client.Client object at 0x107e56b10>
another_user_client = <django.test.client.Client object at 0x107e6a290>
unlogged_client = <django.test.client.Client object at 0x107aca4d0>
comment_to_a_post = <Comment: changchristian>
create_post_context_form_item = KeyVal(key='form', val=<PostForm bound=False, valid=False, fields=(is_published;title;text;pub_date;image;author;location;category)>)
PostModel = <class 'blog.models.Post'>
CommentModelAdapter = <class 'adapters.comment.CommentModelAdapter.<locals>._CommentModelAdapter'>

    @pytest.mark.django_db(transaction=True)
    def test_post(
            published_category: Model,
            published_location: Model,
            user_client: django.test.Client,
            another_user_client: django.test.Client,
            unlogged_client: django.test.Client,
            comment_to_a_post: Model,
            create_post_context_form_item: Tuple[str, BaseForm],
            PostModel: Type[Model],
            CommentModelAdapter: CommentModelAdapterT
    ):
        _, ctx_form = create_post_context_form_item
    
        create_a_post_get_response = get_create_a_post_get_response_safely(
            user_client)
    
>       response_on_created, created_items = _test_create_items(
            PostModel, PostModelAdapter,
            another_user_client,
            create_a_post_get_response, ctx_form,
            published_category, published_location,
            unlogged_client, user_client)

tests/test_post.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_post.py:133: in _test_create_items
    creation_tester.test_unlogged_cannot_create(
tests/form/base_form_tester.py:193: in test_unlogged_cannot_create
    self.test_create_item(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <form.post.create_form_tester.CreatePostFormTester object at 0x1086b9650>
form = <PostForm bound=True, valid=False, fields=(is_published;title;text;pub_date;image;author;location;category)>
qs = <QuerySet [<Post: Than Program Player >]>
submitter = <form.base_form_tester.AnonymousSubmitTester object at 0x108873e90>
assert_created = False

    def test_create_item(
            self, form: BaseForm, qs: QuerySet,
            submitter: SubmitTester,
            assert_created: bool = True
    ) -> Tuple[HttpResponse, Model]:
    
        try:
            response, created = self.try_create_item(
                form, qs, submitter, assert_created)
        except FormValidationException:
            student_form_fields = [
                self._ModelAdapter(form.Meta.model).get_student_field_name(k)
                for k in form.data.keys()]
            student_form_fields_str = ', '.join(student_form_fields)
>           raise AssertionError(
                f'Убедитесь, что для валидации {self.of_which_form} '
                f'достаточно заполнения следующих полей: '
                f'{student_form_fields_str}.'
            )
E           AssertionError: Убедитесь, что для валидации формы для создания публикации достаточно заполнения следующих полей: title, text, pub_date, category, location.

tests/form/base_form_tester.py:223: AssertionError
___________________________ test_static_pages_as_cbv ___________________________

    def test_static_pages_as_cbv():
        try:
            from pages import urls
        except Exception as e:
            raise AssertionError(
                'Убедитесь, что в файле `pages/urls.py` нет ошибок. '
                'При его импорте возникла ошибка:\n'
                f'{type(e).__name__}: {e}'
            )
        try:
            from pages.urls import urlpatterns
        except Exception:
            raise AssertionError(
                'Убедитесь, что в файле `pages/urls.py` задан список urlpatterns.'
            )
        try:
            from pages.urls import app_name
        except Exception:
            raise AssertionError(
                'Убедитесь, что в файле `pages/urls.py` '
                'определена глобальная переменная `app_name`, '
                'задающая пространство имён url для приложения `pages`.'
            )
        for path in urlpatterns:
            if not hasattr(path.callback, 'view_class'):
>               raise AssertionError(
                    'Убедитесь, что в файле `pages/urls.py` подключаете маршруты '
                    'статических страниц, используя CBV.'
                )
E               AssertionError: Убедитесь, что в файле `pages/urls.py` подключаете маршруты статических страниц, используя CBV.

tests/test_static_pages.py:26: AssertionError
--------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ============================
FAILED tests/test_content.py::TestContent::test_unpublished - AssertionError:...
FAILED tests/test_content.py::TestContent::test_unpublished_category - Assert...
FAILED tests/test_content.py::TestContent::test_future_posts - AssertionError...
FAILED tests/test_content.py::TestContent::test_pagination - AssertionError: ...
FAILED tests/test_content.py::TestContent::test_image_visible - AssertionErro...
FAILED tests/test_err_pages.py::test_custom_err_handlers - AssertionError: Уб...
FAILED tests/test_users.py::test_profile - AssertionError: Убедитесь, что на ...
FAILED tests/test_post.py::test_post - AssertionError: Убедитесь, что для вал...
FAILED tests/test_static_pages.py::test_static_pages_as_cbv - AssertionError:...
ERROR tests/test_comment.py::test_comment_created_at - ValueError: Mixer (blo...
ERROR tests/test_comment.py::test_comment - AssertionError: Убедитесь, что в ...
============== 9 failed, 10 passed, 2 warnings, 2 errors in 2.25s ==============
